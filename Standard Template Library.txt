STL

CONTAINERS
	Sequence containers(array and linked list):
		- vector, deque, list, forward list, array
	Associative Containers(binary tree)
		-set, multiset,
		-map, multimap
	Unordered Containers(hash table)
		-Unordered set/multiset
		-Unordered map/multimap
		
STL Headers

	#include<vector>
	#include<deque>
	#include<list>
	#include<set>	//set and multiset
	#include<map>	//map and multimap
	#include<unordered_set>		//unordered set/multiset
	#include<unordered_map>		
	#include<iterator>
	#include<algorithm>
	#include<numeric>	//some numeric algorithm
	#include<functional>

SEQUENCE CONTAINERS

Vector
	
	vector<int> vec; //vec.size() == 0
	vec.push_back(4);
	vec.push_back(1);
	vec.push_back(8);	//vec:{4,1,8};	vec.size() = 0
		
	//Vector specific operations:
	cout<<vec[2];	//8 (no range check)
	cout<<vec.at(2)	//8 (throw range_error exception of out of range)
	
	for(int i; i < vec.size(); i++) {
		cout<<vec[i]<<" ";
	}
		
	for(vector<int>::iterator itr = vec.begin(); ite != vec.end(); ++itr)
		cout<<*itr<<" ";
		
	for(it :: vec) //C++ 11
		cout<<it<<" ";
		
	//Vector is a dynamically allocated contigous array in memory
	int *p = &vec[0]; p[2] = 6;
	
	//Common member function of all containers.
	//vec: {4,1,8}
	if(vec.empty()) {cout << "Not Possible.\n";}
	
	cout<<vec.size(); //3
	
	vector<int> vec2(vec); //copy constructor, vec2: {4,1,8}
	
	vec.clear();	//remove all items in vec; vec.size() == 0
	
	vec2.swap(vec);	//vec2 becomes empty, and vec has 3 items
	
	//Notes: NO penalty of abstraction, very efficient
	
	/*PROPERTIES  of Vector
	 * 1 fast insert/remove at the end: O(1)
	 * 2 slow insert/remove at the beginning or in the middle: O(n)
	 * 3 slow search: O(n)
	 */
	 

DEQUE
	
	deque<int> deq = {4,6,7};
	deq.push_front(2);	//deq: {2,4,6,7}
	deq.push_back(3);	//deq: {2,4,6,7,3}st
	
	//Deque has similat interface with vector
	cout<< deq[1];	//4
	
	/*PROPERTIES  
	 * 1 fast insert/remove at the end and at the end: O(1)
	 * 2 slow insert/remove in the middle: O(n)
	 * 3 slow search: O(n)
	 */
	 
LIST
	//double linked list
	
	list<int>mylist = {5,2,9}
	mylist.push_back(6);	//mylist: {5,2,9,6}
	mylist.push_front(4);	//mylist:{4,5,2,9,6}
	
	list<int>::iterator itr = find(mylist.begin(), mylist.end(),2);	//itr -> 2
	mylist.insert(itr, 8);	//mylist: {4,5,8,2,9,6}
							//O(1), faster than vector/deque
	itr++					//itr ->9
	mylist.erase(itr);				//mylist: {4,5,8,2,6}  o(1)
	
	/*PROPERTIES  
	 * 1 fast insert/remove at any place: O(1)
	 * 2 no random acces, no [] operator
	 * 3 slow search: O(n)
	 */
	 
	 mylist.splice(itr, mylist2, itr_a, itr_b);	//O(1)
	 
ARRAY

	int a[3] = {3,4,5};
	array<int, 3> a = {3,4,5};
	a.begin();
	a.end();
	a.size();
	a.swap();
	array<int, 4> b = {3, 4, 5};
	
ASSOCIATIVE CONTAINERS

SET
	//no duplicates
	
	set<int> myset;
	myset.insert(3);	//myset:{3}
	myset.insert(1);	//myset:{1,3}
	myset.insert(7);	//myset:{1,3,7} O(log(n))
	
	set<int>::iterator ir;
	it = myset.find(7);		//O(log(n)) it points to 7}		
							//Sequence containers don't even have find() member function
	pair<set<int>::iterator, bool> ret;
	ret = myset.insert(3);	//no new element inserted
	if(ret.second == false)
		it = ret.first; 	//"it"now points to element 3}
		
	myset.insert(it, 9); //myset: {1,3,7,9} O(log(n)) => O(1)
						//it points to element 3
	myset.erase(it);	//myset:{1,7,9}
	
	myset.erase(7)	//myset: {1,9}
		//NOTE : none of the sequence containers provide this kind o erase

	//multitset is a set that allows duplicate items
	multiset<int>myset;
	
	//set/multiset: value of the elements cannnot be modified
	*it = 10; 	//*it is read-only
	
	/*PROPERTIES  
	 * 1 No random access,no [] operator
	 * 2 Traversing is slow (compared to vector & deque)
	 * 3 fast search: O(log(n))
	 */
	 
MAP
	No duplicate key
	
	map<char, int>mymap;
	mymap.insert( pair<char,int>('a',100));
	mymap.insert(make_pair('z',200));
	
	map<char, int>:: iterator it = mymap.begin();
	mymap.isert(it, pair<char,int>('b',300));	//"it" is a hint
	
	it = mymap.find('z');	//O(log(n))
	
	//Showing contents:
	for(it = mymap.begin(); it != mymap.end(); it++) {
		cout<<(*it).first << "=>" << (*it).second<<endl;
	}
	
	//multimap is a map that allows duplicate keys
	multimap<char,int>mymap;
	
	//map/mulitmap:
	// -- keys cannot be modified
	// type of *it: pair<const char, int>
		(*it).first = 'd'; 	//Error
		
UNORDERED CONTAINERS

UNORDERED SET

	unordered_set<string> myset = {"red","green","blue"};
	unordered_set<string>::const_iterator itr = myset.find("green");	//O(1)
	if(itr !- myset.end())	//Important check
		cout<<*itr<<endl;
	myset.insert("yellow");	//O(1)
	
	vector<string>vec = {"purple","pink"};
	myset.insert(vec.begin(),vec,end());
	
	//HASH table specific APIs:
	cout<<"load_factor = "<<myset.load_factor()<<endl;
	string x = "red";
	cout<<x<<"is in bucket #"<<myset.bucket(x) << endl;
	cout<<"Total bucket # " << myset.bucket_count() <<endl;
	
	//unordered multiset: unordered set that allows duplicate elements
	//unordered map: unordered set of pairs
	//unordered multimap: unordered map that allows duplicate keys
	
	//hash collision => performance degrade

	/*PROPERTIES of UNORDERED CONTAINER:
	 * 1 Fastest search/insert at any place: O(1)
	 *	Associative Container takes O(log(n))
	 *	vector, deque takes O(n)
	 *	list takes O(1) to insert, O(n) to search
	 * 2 Unordered set/multiset: element value cannot be changed
	 *   Unordered map/multimap: element key cannot be changed
	 */

ASSOCIATIVE ARRAY
	//map and unorderd map
	
	unordered_map<char, string> day = {{'S',"Sunday"},{'M',"Monday"}};
	
	cout<<day['S']<<endl;	//No range check
	cout<<day.at('S')<<endl	//Has range check
	vector<int> vec = {1,2,3};
	vec[5] = 5;	//compile error
	day['W'] = "Wednesday"; //Inserting {'W',"Wednesday"}
	day.insert(make_pair('F',"Friday"));	//Inserting {'F',"Friday"}
	
	day.insert(make_pair('M',"Monday"));	//Fail to modify, it's an unordered_map
	day['M'] = "MONDAY";		//Succeed to modify
	
	void foo(const unordered_map<char, string>&m) {
		//m['S'] = "SUNDAY";
		//cout<<m['S'] << endl;
		auto itr = m.find('S');
		if(itr != m.end())
			cout<<*itr;
	}
	foo(day);
	
	/*PROPERTIES
	 *1 Search time: unordered_map,O(1); map, O(log(n));
	 *2 Unordered_map may degrade to O(n);
	 *3 Can't use multimap and unordered_multimap, they don't have [] operator.
	 */
	 
CONTAINER ADAPTOR

	-Provide a restricted iterface to meet special needs
	-Implemented with fundamental contianer classes
	
1. stack: LIFO, push(), pop(),top()
2. queue: FIFO, push(), pop(), front(), back()
3.priority queue: first item always have the greatest priority
	push() ,pop(),top()
	
ITERATORS

	1. Random Access Iterators: vector, deque, array
		vector<int>itr;
		itr = itr +5;
		itr = itr - 4;
		++itr 	//faster than itr++
		--itr
		
	2. Bidirectional Iterator: list, set/multiset, map/multimap
		list<int>itr;
		++itr;
		--itr;
		
	3. Forward Iterator:forward_list
		forward_list<int>itr;
		++itr;
	
	Note: Unordered containers provide "at least" forward iterators.
	
	 4. Input Iterator:read and process values wile iterating forward.
	 	int x = *itr;
	 
	 5. Output Iterator: output values while iterating forward.
	 	*itr = 100;
	 	
	 //Every container has a iterator and a const_iterator
	 set<int>::iterator itr;
	 set<int>::const_iterator citr; //Read_only access to container elements
	 
	 set<int>myset = {2,4,5,1,9};
	 for(citr = myset.begin(); citr != myset.end(); ++citr) {
	 	cout<<*citr<<endl;
	 	//*citr = 3;
	 }
	 for_each(myset.cbegin(), myset.cend(), MyFunction); //Only in C++ 11
	 
	 //Iterator Fucntion:
	 advance(itr, 5);	//Moves itr forward 5 spots.
	 distance(itr1,itr2);	//Measure the distance between itr1 and itr2
	 
ITERATOR ADAPTOR (Predefined Iterator)
	-special, more powerful iterator
	
	1. Insert iterator:
		vector<int>vec1 = {4,5}
		vector<int>vec2 = {12,14,16,18};
		vector<int>:: iterator it = find(vec2.begin(), vec.end(), 16);
		insert_iterator<vector<int>>i_itr(vec2,it);
		copy(vec1.begin(), vec1.end(),i_itr);
		//vec2 :{ 12, 14, 4 ,5 ,16, 18}
		//Other insert iterators: back_insert_iterator, front_insert_iterator
		
		
	2. Stream iterator
		vector<string>vec4;
		copy(istream_iterator<string>(cin),istream_iterator<string>(),back_inserter(vec4));
		copy(vec4.begin(), vec4.end(); ostream_iterator<string>(cout," "));
		
		//Make it terse:
		copy(istream_iterator<string>(cin),istream_iterator<string>(),ostream_iterator<string>(cout," "));
	
	3. Reverse iterator
		vector<int>vec = {4,5,6,7};
		reverse_iterator<vector<int>::iterator> ritr;
		for(ritr = vec.rbegin(); ritr != vec.rend9); ritr++)
			cout<<*ritr<<endl;	//prints: 7 6 5 4
			
	4.Move iterator(C++ 11)

	
	 
	 
	 
	 	
	 	
	
	
	
	
