USE: It is used for modular exponentiation for large value of exponent i.e. for calculating [(a ^ b) % m] for some a, b & m .

COMPLEXITY: The running time of this algorithm is O(log exponent).

PSEUDO CODE:
_______________________________________________________________
function modular_pow(base, exponent, modulus)
    if modulus = 1 then return 0
    Assert :: (modulus - 1) * (modulus - 1) does not overflow base
    result := 1
    base := base mod modulus
    while exponent > 0
        if (exponent mod 2 == 1):
           result := (result * base) mod modulus
        exponent := exponent >> 1
        base := (base * base) mod modulus
    return result
________________________________________________________________

EXPLANATION:

This algorithm is a combination of the Exponentiation by Squaring algorithm and modulo arithmetic.

To understand what's going on, first consider a situation when exponent is a power of 2.
Then, assuming that exponent = 2 ^ k, the result could be computed by squaring the result k times, i.e.

res = (...((base ^ 2) ^2 ) ... ) ^2))
              ---------------------
                     k times
When exponent is not a power of 2, we need to make additional multiplications.
It turns out that if we can divide exponent by 2 without remainder, we can square the base, and divide the exponent. 
If, however, there is a remainder, we must additionally multiply the intermediate result by the value of the current base.

What you see is the same exponentiation by squaring applied to modulo multiplication.
The algorithm denotes integer division by two using the exponent >> 1 operation, which is identical to floor(exponent / 2).

EXAMPLE:

base = 4, exponent = 13, and modulus = 497. Note that exponent is 1101 in binary notation.
Because exponent is four binary digits in length, the loop executes only four times:

* Upon entering the loop for the first time, variables base = 4, exponent = 1101 (binary), and result = 1.
Because the right-most bit of exponent is 1, result is changed to be (1 * 4) % 497, or 4.
exponent is right-shifted to become 110 (binary), and base is squared to be (4 * 4) % 497, or 16.

* The second time through the loop, the right-most bit of exponent is 0, causing result to retain its present value of 4.
exponent is right-shifted to become 11 (binary), and base is squared to be (16 * 16) % 497, or 256.

* The third time through the loop, the right-most bit of exponent is 1. 
result is changed to be (4 * 256) % 497, or 30. 
exponent is right-shifted to become 1, and base is squared to be (256 * 256) % 497, or 429.

* The fourth time through the loop, the right-most bit of exponent is 1. 
result is changed to be (30 * 429) % 497, or 445. 
exponent is right-shifted to become 0, and base is squared to be (429 * 429) % 497, or 151.

The loop then terminates since exponent is zero, and the result 445 is returned.
